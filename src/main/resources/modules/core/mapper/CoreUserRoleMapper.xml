<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.mintleaf.modules.core.mapper.CoreUserRoleMapper">
  <resultMap id="BaseResultMap" type="org.mintleaf.modules.core.domain.CoreUserRole">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="userid" jdbcType="INTEGER" property="userid" />
    <result column="roleid" jdbcType="INTEGER" property="roleid" />
    <result column="creator" jdbcType="INTEGER" property="creator" />
    <result column="createtime" jdbcType="TIMESTAMP" property="createtime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, userid, roleid, creator, createtime
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from core_user_role
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from core_user_role
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="org.mintleaf.modules.core.domain.CoreUserRole">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into core_user_role (userid, roleid, creator, 
      createtime)
    values (#{userid,jdbcType=INTEGER}, #{roleid,jdbcType=INTEGER}, #{creator,jdbcType=INTEGER}, 
      #{createtime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="org.mintleaf.modules.core.domain.CoreUserRole">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into core_user_role
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userid != null">
        userid,
      </if>
      <if test="roleid != null">
        roleid,
      </if>
      <if test="creator != null">
        creator,
      </if>
      <if test="createtime != null">
        createtime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userid != null">
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="roleid != null">
        #{roleid,jdbcType=INTEGER},
      </if>
      <if test="creator != null">
        #{creator,jdbcType=INTEGER},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.mintleaf.modules.core.domain.CoreUserRole">
    update core_user_role
    <set>
      <if test="userid != null">
        userid = #{userid,jdbcType=INTEGER},
      </if>
      <if test="roleid != null">
        roleid = #{roleid,jdbcType=INTEGER},
      </if>
      <if test="creator != null">
        creator = #{creator,jdbcType=INTEGER},
      </if>
      <if test="createtime != null">
        createtime = #{createtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.mintleaf.modules.core.domain.CoreUserRole">
    update core_user_role
    set userid = #{userid,jdbcType=INTEGER},
      roleid = #{roleid,jdbcType=INTEGER},
      creator = #{creator,jdbcType=INTEGER},
      createtime = #{createtime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <delete id="deleteBatch">
    delete from core_user_role
    where 1=1
    <if test="ids!=null and ids.size()>0">
      <foreach collection="ids" item="ids" open="AND ("
               separator="OR" close=")">
        userid = #{ids,jdbcType = INTEGER}
      </foreach>
    </if>
  </delete>
  <delete id="deleteByUserId">
    delete from core_user_role
    where userid = #{userId,jdbcType=INTEGER}
  </delete>

  <select id="getCoreUserByUserId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from core_user_role
    where userid = #{userId,jdbcType=INTEGER}
  </select>
</mapper>